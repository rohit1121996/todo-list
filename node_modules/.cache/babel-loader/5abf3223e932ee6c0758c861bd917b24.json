{"ast":null,"code":"var _jsxFileName = \"/home/rohit/Desktop/myproject/todo-list/src/components/Dialog.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dialog(_ref) {\n  _s();\n\n  let {\n    show,\n    setShow\n  } = _ref;\n  const [todo, setTodo] = React.useState({\n    todoName: \"\",\n    description: \"\",\n    userId: \"\"\n  });\n  const [users, setUsers] = React.useState([]);\n\n  const handleClose = () => setShow(false);\n\n  const handleCreateTodo = async () => {\n    try {\n      console.log(todo);\n      const url = \"\";\n      const params = {};\n      const response = await fetch(url, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(params)\n      });\n      const res = await response.json();\n      setShow(false);\n    } catch (e) {\n      console.log(e);\n    } finally {//\n    }\n  };\n\n  const fetchUsersData = async () => {\n    try {\n      const url = \"http://localhost:4000/api/users/allUsers\";\n      const response = await fetch(url, {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const res = await response.json();\n\n      if (res && res.length > 0) {\n        setUsers(() => [...res]);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {//\n    }\n  };\n\n  React.useEffect(() => {\n    fetchUsersData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: () => setShow(false),\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"example-custom-modal-styling-title\",\n          children: \"Create new todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Todo Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Todo Name\",\n              value: todo.todoName,\n              onInput: e => setTodo(prev => ({ ...prev,\n                todoName: e.target.value\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              placeholder: \"Description\",\n              value: todo.description,\n              onInput: e => setTodo(prev => ({ ...prev,\n                description: e.target.value\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"formBasicPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Assign employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n              \"aria-label\": \"Default select example\",\n              value: todo.userId,\n              onChange: e => setTodo(prev => ({ ...prev,\n                userId: e.target.value\n              })),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Open this select menu\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), users && users.map(ele => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: ele.id,\n                children: ele.name\n              }, ele.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleCreateTodo,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dialog, \"Q5qfWA6m3AxHgmIjs3FMvdTdWpg=\");\n\n_c = Dialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialog\");","map":{"version":3,"sources":["/home/rohit/Desktop/myproject/todo-list/src/components/Dialog.js"],"names":["React","Modal","Button","Form","Dialog","show","setShow","todo","setTodo","useState","todoName","description","userId","users","setUsers","handleClose","handleCreateTodo","console","log","url","params","response","fetch","method","mode","headers","body","JSON","stringify","res","json","e","fetchUsersData","length","error","useEffect","prev","target","value","map","ele","id","name"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AACA,eAAe,SAASC,MAAT,OAAmC;AAAA;;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;AAChD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACS,QAAN,CAAe;AACrCC,IAAAA,QAAQ,EAAE,EAD2B;AAErCC,IAAAA,WAAW,EAAE,EAFwB;AAGrCC,IAAAA,MAAM,EAAE;AAH6B,GAAf,CAAxB;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,KAAK,CAACS,QAAN,CAAe,EAAf,CAA1B;;AACA,QAAMM,WAAW,GAAG,MAAMT,OAAO,CAAC,KAAD,CAAjC;;AACA,QAAMU,gBAAgB,GAAG,YAAY;AACnC,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACA,YAAMY,GAAG,GAAG,EAAZ;AACA,YAAMC,MAAM,GAAG,EAAf;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAChCI,QAAAA,MAAM,EAAE,MADwB;AAEhCC,QAAAA,IAAI,EAAE,MAF0B;AAGhCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAHuB;AAMhCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,MAAf;AAN0B,OAAN,CAA5B;AAQA,YAAMS,GAAG,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAlB;AACAxB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAdD,CAcE,OAAOyB,CAAP,EAAU;AACVd,MAAAA,OAAO,CAACC,GAAR,CAAYa,CAAZ;AACD,KAhBD,SAgBU,CACR;AACD;AACF,GApBD;;AAqBA,QAAMC,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAMb,GAAG,GAAG,0CAAZ;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAChCI,QAAAA,MAAM,EAAE,KADwB;AAEhCC,QAAAA,IAAI,EAAE,MAF0B;AAGhCC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHuB,OAAN,CAA5B;AAOA,YAAMI,GAAG,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAlB;;AACA,UAAID,GAAG,IAAIA,GAAG,CAACI,MAAJ,GAAa,CAAxB,EAA2B;AACzBnB,QAAAA,QAAQ,CAAC,MAAM,CAAC,GAAGe,GAAJ,CAAP,CAAR;AACD;AACF,KAbD,CAaE,OAAOE,CAAP,EAAU;AACVd,MAAAA,OAAO,CAACiB,KAAR,CAAcH,CAAd;AACD,KAfD,SAeU,CACR;AACD;AACF,GAnBD;;AAoBA/B,EAAAA,KAAK,CAACmC,SAAN,CAAgB,MAAM;AACpBH,IAAAA,cAAc;AACf,GAFD,EAEG,EAFH;AAGA,sBACE;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,IAAI,EAAE3B,IADR;AAEE,MAAA,MAAM,EAAE,MAAMC,OAAO,CAAC,KAAD,CAFvB;AAGE,yBAAgB,oCAHlB;AAAA,8BAIE,QAAC,KAAD,CAAO,MAAP;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,EAAE,EAAC,oCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eASE,QAAC,KAAD,CAAO,IAAP;AAAA,+BACE,QAAC,IAAD;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,MAAtB;AAA6B,YAAA,SAAS,EAAC,gBAAvC;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,WAAW,EAAC,WAFd;AAGE,cAAA,KAAK,EAAEC,IAAI,CAACG,QAHd;AAIE,cAAA,OAAO,EAAGqB,CAAD,IACPvB,OAAO,CAAE4B,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAW1B,gBAAAA,QAAQ,EAAEqB,CAAC,CAACM,MAAF,CAASC;AAA9B,eAAX,CAAD;AALX;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,MAAtB;AAA6B,YAAA,SAAS,EAAC,mBAAvC;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,EAAE,EAAC,UADL;AAEE,cAAA,IAAI,EAAE,CAFR;AAGE,cAAA,WAAW,EAAC,aAHd;AAIE,cAAA,KAAK,EAAE/B,IAAI,CAACI,WAJd;AAKE,cAAA,OAAO,EAAGoB,CAAD,IACPvB,OAAO,CAAE4B,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWzB,gBAAAA,WAAW,EAAEoB,CAAC,CAACM,MAAF,CAASC;AAAjC,eAAX,CAAD;AANX;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eAyBE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,MAAtB;AAA6B,YAAA,SAAS,EAAC,mBAAvC;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,MAAN;AACE,4BAAW,wBADb;AAEE,cAAA,KAAK,EAAE/B,IAAI,CAACK,MAFd;AAGE,cAAA,QAAQ,EAAGmB,CAAD,IACRvB,OAAO,CAAE4B,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWxB,gBAAAA,MAAM,EAAEmB,CAAC,CAACM,MAAF,CAASC;AAA5B,eAAX,CAAD,CAJX;AAAA,sCAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANF,EAOGzB,KAAK,IACJA,KAAK,CAAC0B,GAAN,CAAWC,GAAD,iBACR;AAAqB,gBAAA,KAAK,EAAEA,GAAG,CAACC,EAAhC;AAAA,0BACGD,GAAG,CAACE;AADP,iBAAaF,GAAG,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,sBADF,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATF,eAsDE,QAAC,KAAD,CAAO,MAAP;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAE1B,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,OAAO,EAAEC,gBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmED;;GAvHuBZ,M;;KAAAA,M","sourcesContent":["/** @format */\n\nimport React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nexport default function Dialog({ show, setShow }) {\n  const [todo, setTodo] = React.useState({\n    todoName: \"\",\n    description: \"\",\n    userId: \"\",\n  });\n  const [users, setUsers] = React.useState([]);\n  const handleClose = () => setShow(false);\n  const handleCreateTodo = async () => {\n    try {\n      console.log(todo);\n      const url = \"\";\n      const params = {};\n      const response = await fetch(url, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(params),\n      });\n      const res = await response.json();\n      setShow(false);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      //\n    }\n  };\n  const fetchUsersData = async () => {\n    try {\n      const url = \"http://localhost:4000/api/users/allUsers\";\n      const response = await fetch(url, {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const res = await response.json();\n      if (res && res.length > 0) {\n        setUsers(() => [...res]);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      //\n    }\n  };\n  React.useEffect(() => {\n    fetchUsersData();\n  }, []);\n  return (\n    <div>\n      <Modal\n        show={show}\n        onHide={() => setShow(false)}\n        aria-labelledby=\"example-custom-modal-styling-title\">\n        <Modal.Header>\n          <Modal.Title id=\"example-custom-modal-styling-title\">\n            Create new todo\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n              <Form.Label>Todo Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Todo Name\"\n                value={todo.todoName}\n                onInput={(e) =>\n                  setTodo((prev) => ({ ...prev, todoName: e.target.value }))\n                }\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                placeholder=\"Description\"\n                value={todo.description}\n                onInput={(e) =>\n                  setTodo((prev) => ({ ...prev, description: e.target.value }))\n                }\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n              <Form.Label>Assign employee</Form.Label>\n              <Form.Select\n                aria-label=\"Default select example\"\n                value={todo.userId}\n                onChange={(e) =>\n                  setTodo((prev) => ({ ...prev, userId: e.target.value }))\n                }>\n                <option>Open this select menu</option>\n                {users &&\n                  users.map((ele) => (\n                    <option key={ele.id} value={ele.id}>\n                      {ele.name}\n                    </option>\n                  ))}\n              </Form.Select>\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleCreateTodo}>\n            Create\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}